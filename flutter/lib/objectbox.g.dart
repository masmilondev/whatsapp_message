// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/abandoned_model.dart';
import 'models/customer_model.dart';
import 'models/tawabel_customer_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1467665897576359487),
      name: 'CustomerModel',
      lastPropertyId: const IdUid(6, 9113838504498379174),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6859999724237606135),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3163464463903693746),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8968445755859713237),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2998942111761068250),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4610329757278925715),
            name: 'numberOfOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9113838504498379174),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3761524127094006462),
      name: 'TawabelCustomerModel',
      lastPropertyId: const IdUid(10, 8634889336469823606),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6990333742876165417),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 679769509730283815),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7165601763394918594),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3484190849117254909),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1066279832609852686),
            name: 'numberOfOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8927964952597323167),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3500529952017528085),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1014431019569624438),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7468882766652313384),
            name: 'isBlock',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8634889336469823606),
            name: 'addedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7011838201095573666),
      name: 'AbandonedModel',
      lastPropertyId: const IdUid(10, 4459311135925909664),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3261279947958982779),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8134786639288790362),
            name: 'phase',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6377543383463381740),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4783798640037729700),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9183873632400211746),
            name: 'numberOfProduct',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6228507253627335007),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8897086233260747621),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7589280214744964850),
            name: 'isSaudi',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7021301761084650020),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4459311135925909664),
            name: 'isBlocked',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 7011838201095573666),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CustomerModel: EntityDefinition<CustomerModel>(
        model: _entities[0],
        toOneRelations: (CustomerModel object) => [],
        toManyRelations: (CustomerModel object) => {},
        getId: (CustomerModel object) => object.id,
        setId: (CustomerModel object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final mobileOffset = fbb.writeString(object.mobile);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, mobileOffset);
          fbb.addOffset(3, cityOffset);
          fbb.addInt64(4, object.numberOfOrder);
          fbb.addOffset(5, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CustomerModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              mobile: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              numberOfOrder: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12))
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    TawabelCustomerModel: EntityDefinition<TawabelCustomerModel>(
        model: _entities[1],
        toOneRelations: (TawabelCustomerModel object) => [],
        toManyRelations: (TawabelCustomerModel object) => {},
        getId: (TawabelCustomerModel object) => object.id,
        setId: (TawabelCustomerModel object, int id) {
          object.id = id;
        },
        objectToFB: (TawabelCustomerModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final mobileOffset = fbb.writeString(object.mobile);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final statusOffset = fbb.writeString(object.status);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, mobileOffset);
          fbb.addOffset(3, cityOffset);
          fbb.addInt64(4, object.numberOfOrder);
          fbb.addOffset(5, statusOffset);
          fbb.addOffset(6, typeOffset);
          fbb.addFloat64(7, object.amount);
          fbb.addBool(8, object.isBlock);
          fbb.addInt64(9, object.addedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TawabelCustomerModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              mobile: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              addedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              numberOfOrder: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              amount:
                  const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 18),
              isBlock: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20));

          return object;
        }),
    AbandonedModel: EntityDefinition<AbandonedModel>(
        model: _entities[2],
        toOneRelations: (AbandonedModel object) => [],
        toManyRelations: (AbandonedModel object) => {},
        getId: (AbandonedModel object) => object.id,
        setId: (AbandonedModel object, int id) {
          object.id = id;
        },
        objectToFB: (AbandonedModel object, fb.Builder fbb) {
          final phaseOffset =
              object.phase == null ? null : fbb.writeString(object.phase!);
          final nameOffset = fbb.writeString(object.name);
          final mobileOffset = fbb.writeString(object.mobile);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, phaseOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mobileOffset);
          fbb.addInt64(4, object.numberOfProduct);
          fbb.addFloat64(5, object.amount);
          fbb.addInt64(6, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addBool(7, object.isSaudi);
          fbb.addOffset(8, statusOffset);
          fbb.addBool(9, object.isBlocked);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = AbandonedModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              mobile: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              isSaudi: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              numberOfProduct: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              amount: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              phase: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              updatedAt: updatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(updatedAtValue),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              isBlocked: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 22));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CustomerModel] entity fields to define ObjectBox queries.
class CustomerModel_ {
  /// see [CustomerModel.id]
  static final id =
      QueryIntegerProperty<CustomerModel>(_entities[0].properties[0]);

  /// see [CustomerModel.name]
  static final name =
      QueryStringProperty<CustomerModel>(_entities[0].properties[1]);

  /// see [CustomerModel.mobile]
  static final mobile =
      QueryStringProperty<CustomerModel>(_entities[0].properties[2]);

  /// see [CustomerModel.city]
  static final city =
      QueryStringProperty<CustomerModel>(_entities[0].properties[3]);

  /// see [CustomerModel.numberOfOrder]
  static final numberOfOrder =
      QueryIntegerProperty<CustomerModel>(_entities[0].properties[4]);

  /// see [CustomerModel.status]
  static final status =
      QueryStringProperty<CustomerModel>(_entities[0].properties[5]);
}

/// [TawabelCustomerModel] entity fields to define ObjectBox queries.
class TawabelCustomerModel_ {
  /// see [TawabelCustomerModel.id]
  static final id =
      QueryIntegerProperty<TawabelCustomerModel>(_entities[1].properties[0]);

  /// see [TawabelCustomerModel.name]
  static final name =
      QueryStringProperty<TawabelCustomerModel>(_entities[1].properties[1]);

  /// see [TawabelCustomerModel.mobile]
  static final mobile =
      QueryStringProperty<TawabelCustomerModel>(_entities[1].properties[2]);

  /// see [TawabelCustomerModel.city]
  static final city =
      QueryStringProperty<TawabelCustomerModel>(_entities[1].properties[3]);

  /// see [TawabelCustomerModel.numberOfOrder]
  static final numberOfOrder =
      QueryIntegerProperty<TawabelCustomerModel>(_entities[1].properties[4]);

  /// see [TawabelCustomerModel.status]
  static final status =
      QueryStringProperty<TawabelCustomerModel>(_entities[1].properties[5]);

  /// see [TawabelCustomerModel.type]
  static final type =
      QueryStringProperty<TawabelCustomerModel>(_entities[1].properties[6]);

  /// see [TawabelCustomerModel.amount]
  static final amount =
      QueryDoubleProperty<TawabelCustomerModel>(_entities[1].properties[7]);

  /// see [TawabelCustomerModel.isBlock]
  static final isBlock =
      QueryBooleanProperty<TawabelCustomerModel>(_entities[1].properties[8]);

  /// see [TawabelCustomerModel.addedDate]
  static final addedDate =
      QueryIntegerProperty<TawabelCustomerModel>(_entities[1].properties[9]);
}

/// [AbandonedModel] entity fields to define ObjectBox queries.
class AbandonedModel_ {
  /// see [AbandonedModel.id]
  static final id =
      QueryIntegerProperty<AbandonedModel>(_entities[2].properties[0]);

  /// see [AbandonedModel.phase]
  static final phase =
      QueryStringProperty<AbandonedModel>(_entities[2].properties[1]);

  /// see [AbandonedModel.name]
  static final name =
      QueryStringProperty<AbandonedModel>(_entities[2].properties[2]);

  /// see [AbandonedModel.mobile]
  static final mobile =
      QueryStringProperty<AbandonedModel>(_entities[2].properties[3]);

  /// see [AbandonedModel.numberOfProduct]
  static final numberOfProduct =
      QueryIntegerProperty<AbandonedModel>(_entities[2].properties[4]);

  /// see [AbandonedModel.amount]
  static final amount =
      QueryDoubleProperty<AbandonedModel>(_entities[2].properties[5]);

  /// see [AbandonedModel.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<AbandonedModel>(_entities[2].properties[6]);

  /// see [AbandonedModel.isSaudi]
  static final isSaudi =
      QueryBooleanProperty<AbandonedModel>(_entities[2].properties[7]);

  /// see [AbandonedModel.status]
  static final status =
      QueryStringProperty<AbandonedModel>(_entities[2].properties[8]);

  /// see [AbandonedModel.isBlocked]
  static final isBlocked =
      QueryBooleanProperty<AbandonedModel>(_entities[2].properties[9]);
}
